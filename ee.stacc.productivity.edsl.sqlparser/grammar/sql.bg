%{
import java.io.IOException;
%}

%code {
	public static void main(String[] args) throws IOException {
		SQLParser parser = new SQLParser(new Lexer() {

			int tokens[] = {258,260,259,260,0,0,};
			int current;
			
			@Override
			public Object getLVal() {
				return "";
			}

			@Override
			public void yyerror(String s) {
				
			}

			@Override
			public int yylex() throws IOException {
				return tokens[current++];
			}
			
		});
		parser.yyDebugStream = System.out;
		parser.yydebug = 1;
		
		System.out.println(parser.parse());
	}
}
%define parser_class_name "SQLParser"

%token VALUES
%token ESCAPE
%token SELECT
%token INSERT
%token WHERE
%token ORDER
%token OUTER
%token GROUP
%token RIGHT
%token INNER
%token FROM
%token JOIN
%token LEFT
%token WHEN
%token THEN
%token ELSE
%token CASE
%token INTO
%token FULL
%token DESC
%token ASC
%token AND
%token END
%token XOR
%token NOT
%token OR
%token ON
%token BY
%token AS
%token IN
%token IS
%token NULL
%token DIGAL_ERR
%token STRING_DQ
%token STRING_DQ_ERR 
%token STRING_SQ
%token STRING_SQ_ERR 
%token NUMBER  
%token ID
%token DISTINCT
%token UNKNOWN_CHARACTER_ERR
%token NE
%token LE
%token GE
%token CONCAT
%token TABLE
%token LIKE

//%left AS
%left OR XOR
%left AND
%right NOT
%left '=' NE LE GE '>' '<'
%left '-' '+'  
%left '/' '*' CONCAT

%%
select 
	: basicSelect where orderBy
	;
basicSelect
	: SELECT optDist whatToSelect FROM tableList
	;
where
	: WHERE whereCond
	| /*empty*/
	;
orderBy
	: ORDER BY directionList 
	| /*empty*/
	;
directionList
	: direction
	| direction ',' directionList
	;
direction
	: simpleExpr orderDirection
	;
orderDirection
	: ASC
	| DESC
	| /*empty*/
	;
optDist
	: DISTINCT
	| /*empty*/
	;
whatToSelect
	: selectExpressionList
	;
selectExpression
	: expression
	| selectExpression AS id
	| selectExpression id
	;
id : ID;
expression
	: condition
	| simpleExpr
	;
selectExpressionList
	: selectExpression
	| selectExpression ',' selectExpressionList
	;
tableList 
	: table
	| table ',' tableList 
	;
table
	: alias
	| table join alias ON condition
	;
join
	: JOIN
	| LEFT JOIN
	| outerType OUTER JOIN
	| INNER JOIN
	;
outerType
	: LEFT
	| RIGHT
	| FULL
	;
alias
	: tableExpr
	| tableExpr ID
	; 
tableExpr
	: ident
	| TABLE '(' simpleExpr ')'
	| '(' select ')'
	;
ident 
	: ID 
	| ID '.' ID
	;
whereCond
	: condition;
condition
	: condition AND condition
	| condition OR condition
	| condition XOR condition
	| NOT condition
	| '(' condition ')'
	| comparison
	| simpleExpr inExpr '(' simExList ')'
	| simpleExpr inExpr '(' select ')'
	| simpleExpr IS optNot NULL
	| simpleExpr LIKE simpleExpr escape 
	;
comparison 
	: simpleExpr '=' simpleExpr 
	| simpleExpr '>' simpleExpr 
	| simpleExpr '<' simpleExpr 
	| simpleExpr LE simpleExpr 
	| simpleExpr NE simpleExpr 
	| simpleExpr GE simpleExpr 
    ;
escape
	: ESCAPE STRING_SQ
	| /*empty*/
	;
inExpr
	: optNot IN
	;
optNot
	: NOT
	| /*empty*/
	;
simpleExpr
	: NUMBER
	| CASE whenList else END
	| STRING_SQ
	| ident identRest
	| '(' simpleExpr ')'
	| simpleExpr '-' simpleExpr
	| simpleExpr '+' simpleExpr
	| simpleExpr '*' simpleExpr
	| simpleExpr '/' simpleExpr
	| simpleExpr CONCAT simpleExpr
	| '(' select ')'
	| ID '.' '*'
	| '*'
	| '?'
	| NULL
	;	
identRest
	: '(' simExList ')'
	| /*empty*/
	;
whenList
	: when
	| when whenList
	;
when
	: WHEN condition THEN simpleExpr
	;
else
	: ELSE simpleExpr
	| /*empty*/
	;
simExList
	: simpleExpr
	| simpleExpr ',' simExList
	;